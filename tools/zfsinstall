#!/bin/sh
# $Id$
#
# mfsBSD ZFS install script
# Copyright (c) 2009 Martin Matuska <mm at FreeBSD.org>
#
while getopts d:t:p:s:m: o; do
	case "$o" in
        	d) DEV="${OPTARG}" ;;
        	t) TBZ="${OPTARG}" ;;
        	p) POOL="${OPTARG}" ;;
        	s) SWAP="${OPTARG}" ;;
        	m) MNT="${OPTARG}" ;;
		[?])    echo "Usage: $0 -d disk_device -t dist_tbz_file [-m mount_point] [-p zfs_pool_name] [-s swap_partition_size]"
                	exit 1;;
esac
done

if [ -z "$DEV" -o -z "$TBZ" ]; then
	echo "Usage: $0 -d disk_device -t dist_tbz_file [-m mount_point] [-p zfs_pool_name] [-s swap_partition_size]"
	exit 1
fi

if [ -z "$POOL" ]; then
	POOL=tank
fi

if /sbin/zpool list $POOL > /dev/null 2> /dev/null; then
	echo Error: ZFS pool \"$POOL\" already exists
	echo Please choose another pool name or rename/destroy the existing pool.
	exit 1
fi

EXPOOLS=`/sbin/zpool import | /usr/bin/grep pool: | /usr/bin/head -1 | /usr/bin/awk '{ print $2 }'`

if [ -n "${EXPOOLS}" ]; then
	for P in ${EXPOOLS}; do
		if [ "$P" = "$POOL" ]; then
			echo Error: An exported ZFS pool \"$POOL\" already exists
			echo Please choose another pool name or rename/destroy the exported pool.
			exit 1
		fi
	done
fi

if ! [ -c "${DEV}" ]; then
	echo Error: ${DEV} is not a block device
	exit 1
fi

GEOM=${DEV##/dev/}

if /sbin/gpart show $GEOM > /dev/null 2> /dev/null; then
	echo "Error: ${DEV} already contains a partition table."
	echo ""
	/sbin/gpart show $GEOM
	echo "You may erase the partition table manually with the following command:"
	echo "dd if=/dev/zero of=${DEV} bs=512 count=32"
	exit 1
fi

if ! [ -f "${TBZ}" ]; then
	echo Error: file $TBZ does not exist
	exit 1
fi

if [ "`/usr/bin/file -b --mime-type ${TBZ}`" != "application/x-bzip2" ]; then
	echo Error: file $TBZ is not a bzip2 archive
	exit 1
fi

if [ -z "$MNT" ]; then
	MNT=/mnt
fi

if ! [ -d "${MNT}" ]; then
	echo Error: $MNT is not a directory
	exit 1
fi

if [ -n "${SWAP}" ]; then
	SSWAP="-s ${SWAP}"
fi

# Create GPT

echo -n "Creating GUID partitions on ${DEV} ..."
if ! /sbin/gpart create -s GPT ${DEV} > /dev/null; then
	echo " error"
	exit 1
fi
/bin/sleep 1
if ! /sbin/gpart add -t freebsd-boot -s 128 ${GEOM} > /dev/null; then
	echo " error"
	exit 1
fi
if [ -n "${SWAP}" ]; then
	if ! /sbin/gpart add -t freebsd-swap -s "${SWAP}" ${GEOM} > /dev/null; then
		echo " error"
		exit 1
	fi
	SWAPPART=`/sbin/glabel status ${GEOM}p2 | /usr/bin/grep gptid | /usr/bin/awk '{ print $1 }'`
	if [ -z "$SWAPPART" ]; then
		echo " error determining swap partition"
	fi
	
fi
if ! /sbin/gpart add -t freebsd-zfs ${GEOM} > /dev/null; then
	echo " error"
	exit 1
fi
/bin/dd if=/dev/zero of=/dev/${GEOM}p2 bs=512 count=560 > /dev/null 2> /dev/null
if [ -n "${SWAP}" ]; then
	/bin/dd if=/dev/zero of=/dev/${GEOM}p3 bs=512 count=560 > /dev/null 2> /dev/null
fi
echo " done"

echo -n "Configuring ZFS bootcode on ${DEV} ..."
if ! /sbin/gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ${GEOM} > /dev/null; then
	echo " error"
	exit 1
fi
echo " done"

/sbin/gpart show ${GEOM}

# Create zpool and zfs

GEOM=${DEV##/dev/}

PART=`/sbin/gpart show ${GEOM} | /usr/bin/grep freebsd-zfs | /usr/bin/awk '{ print $3 }'`

if [ -z "${PART}" ]; then
	echo Error: freebsd-zfs partition not found on $DEV
	exit 1
fi

GEOM=${DEV}p${PART}

echo -n "Creating ZFS pool ${POOL} on ${GEOM} ..."
if ! /sbin/zpool create -f -m none ${POOL} ${GEOM} > /dev/null 2> /dev/null; then
	echo " error"
	exit 1
fi
echo " done"
echo -n "Creating ${POOL} partitions:"
for FS in root usr var tmp; do
	if ! /sbin/zfs create -o mountpoint=legacy ${POOL}/${FS} > /dev/null 2> /dev/null; then
		echo " error"
		exit 1
	fi
	echo -n " ${FS}"
done
echo " ... done"
echo -n "Setting bootfs for ${POOL} to ${POOL}/root ..."
if ! /sbin/zpool set bootfs=${POOL}/root ${POOL} > /dev/null 2> /dev/null; then
	echo " error"
	exit 1
fi
echo " done"
/sbin/zfs list -r ${POOL}

# Mount and populate zfs

echo -n "Mounting ${POOL} on ${MNT} ..."
/bin/mkdir -p ${MNT}
if ! /sbin/mount -t zfs ${POOL}/root ${MNT} > /dev/null 2> /dev/null; then
	echo " error mounting pool/root"
	exit 1
fi
/bin/mkdir -p ${MNT}/usr ${MNT}/var ${MNT}/tmp
for FS in usr var tmp; do
	if ! /sbin/mount -t zfs ${POOL}/${FS} ${MNT}/${FS} > /dev/null 2> /dev/null; then
		echo " error mounting ${POOL}/${FS}"
		exit 1
	fi
done
echo " done"
echo -n "Extracting FreeBSD distribution ..."
if ! /usr/bin/tar -C ${MNT} -x -j -f ${TBZ} > /dev/null 2> /dev/null; then
	echo " error"
	exit 1
fi
echo " done"

# Adjust configuration files

echo -n "Writing /boot/loader.conf..."
echo "zfs_load=\"YES\"" > ${MNT}/boot/loader.conf
echo "vfs.root.mountfrom=\"zfs:${POOL}/root\"" >> ${MNT}/boot/loader.conf
echo " done"

echo -n "Writing /etc/src.conf..."
echo "LOADER_ZFS_SUPPORT=\"YES\"" > ${MNT}/etc/src.conf
echo " done"

echo -n "Writing /etc/fstab..."
rm -f ${MNT}/etc/fstab
if [ -n "$SWAPPART" ]; then
	echo "/dev/${SWAPPART} none swap sw 0 0" > ${MNT}/etc/fstab
fi
for FS in usr var tmp; do
echo ${POOL}/${FS} /${FS} zfs rw 0 0 >> ${MNT}/etc/fstab
done
echo " done"

echo -n "Copying /boot/zfs/zpool.cache ..."
/sbin/umount ${MNT}/tmp ${MNT}/usr ${MNT}/var ${MNT} > /dev/null 2> /dev/null
if ! /sbin/zpool export ${POOL} > /dev/null 2> /dev/null; then
	echo " error exporting pool"
	exit 1
fi
if ! /sbin/zpool import ${POOL} > /dev/null 2> /dev/null; then
	echo " error importing pool"
	exit 1
fi
if ! /sbin/mount -t zfs ${POOL}/root ${MNT} > /dev/null 2> /dev/null; then
	echo " error mounting ${POOL}/root"
	exit 1
fi
if ! /bin/cp /boot/zfs/zpool.cache ${MNT}/boot/zfs/ > /dev/null 2> /dev/null; then
	echo " error copying zpool.cache"
	exit 1
fi
for FS in usr var tmp; do
	if ! /sbin/mount -t zfs ${POOL}/${FS} ${MNT}/${FS} > /dev/null 2> /dev/null; then
	echo " error mounting ${POOL}/${FS}"
	exit 1
	fi
done
echo " done"

# Mount devfs for post-configuration

if ! /sbin/mount -t devfs devfs ${MNT}/dev; then
	echo "Error mounting devfs on ${MNT}/dev"
fi

echo ""
echo "Installation complete."
echo "The system will boot from ZFS with clean install on next reboot"
echo ""
echo "You may type \"chroot ${MNT}\" and make any adjustments you need."
echo "For example, change the root password or edit/create /etc/rc.conf for"
echo "for system services. "
